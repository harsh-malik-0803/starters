#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <class T>
using pbds = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define ll long long
#define ld long double
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define nline "\n"
#define pi 3.141592653589793238
const ll INF = 1e18;
const ll M = 1e9 + 7;

bool cmp(ll a, ll b)
{
    return a > b;
}

ll gcd(ll a, ll b) // TC = O(log n)
{
    if (b == 0)
    {
        return a;
    }
    else
    {
        return gcd(b, a % b);
    }
}

ll lcm(ll a, ll b)
{
    return (a / gcd(a, b)) * b;
}

ll power(ll a, ll b)
{
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            res = res * a;
        }
        a = a * a;
        b >>= 1;
    }
    return res;
}

vector<ll> factors(ll n) // all factors of a number
{
    vector<ll> v;

    for (ll i = 1; i <= sqrt(n); i++)
    {
        if (n % i == 0)
        {
            if (n / i == i)
            {
                v.push_back(i);
            }

            else
            {
                v.push_back(i);
                v.push_back(n / i);
            }
        }
    }

    sort(v.begin(), v.end());
    return v;
}

bool isPrime(ll n) // TC = O( sqrt(n) )
{
    if (n <= 1)
    {
        return false;
    }

    if (n <= 3)
    {
        return true;
    }

    if (n % 2 == 0 || n % 3 == 0)
    {
        return false;
    }

    for (ll i = 5; i * i <= n; i = i + 6)
    {
        if (n % i == 0 || n % (i + 2) == 0)
        {
            return false;
        }
    }

    return true;
}

set<ll> sieve(ll n) // all prime numbers till n   TC = O(n)
{
    set<ll> s;

    bool prime[n + 1];
    memset(prime, true, sizeof(prime));

    for (ll p = 2; p * p <= n; p++)
    {
        if (prime[p] == true)
        {
            for (ll i = p * p; i <= n; i += p)
            {
                prime[i] = false;
            }
        }
    }

    for (ll p = 2; p <= n; p++)
    {
        if (prime[p])
        {
            s.insert(p);
        }
    }

    return s;
}

set<ll> prime(ll n) // all prime factors of a number  TC = O(sqrt(n))
{
    set<ll> s;
    while (n % 2 == 0)
    {
        s.insert(2);
        n = n / 2;
    }
    for (ll i = 3; i <= sqrt(n); i = i + 2)
    {
        while (n % i == 0)
        {
            s.insert(i);
            n = n / i;
        }
    }

    if (n > 2)
    {
        s.insert(n);
    }
    return s;
}

ll mod_power(ll x, ll y, ll mod)
{
    ll res = 1;

    x = x % mod;

    if (x == 0)
    {
        return 0;
    }

    while (y > 0)
    {

        if (y & 1)
        {
            res = (res * x) % mod;
        }

        y = y >> 1;
        x = (x * x) % mod;
    }

    return res;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
    if (a == 0)
    {
        *x = 0, *y = 1;
        return b;
    }

    ll x1, y1;
    ll gcd = gcdExtended(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}

ll modInverse(ll b, ll m)
{
    ll x, y;
    ll g = gcdExtended(b, m, &x, &y);

    if (g != 1)
    {
        return -1;
    }

    return (x % m + m) % m;
}

ll mod_multiply(ll a, ll b, ll m)
{
    if (b == 0)
    {
        return 0;
    }
    if (b & 1)
    {
        return (mod_multiply(a, b - 1, m) + a) % m;
    }

    ll half = mod_multiply(a, b >> 1, m);
    return (half + half) % m;
}

ll mod_divide(ll a, ll b, ll m)
{
    a = a % m;
    ll inv = modInverse(b, m);
    return (inv * a) % m;
}
void solve(){
  ll n ;
  cin>>n;
  vector<ll> v(n) ;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    for(int i = 0 ; i< te ; ++i ) solve();

    return 0;
}
